{"version":3,"file":"frappe-gantt.min.js","sources":["../src/date_utils.js","../src/svg_utils.js","../src/bar.js","../src/popup.js","../src/index.js"],"sourcesContent":["const YEAR = 'year';\r\nconst MONTH = 'month';\r\nconst DAY = 'day';\r\nconst HOUR = 'hour';\r\nconst MINUTE = 'minute';\r\nconst SECOND = 'second';\r\nconst MILLISECOND = 'millisecond';\r\n\r\nconst month_names = {\r\n    en: [\r\n        'January',\r\n        'February',\r\n        'March',\r\n        'April',\r\n        'May',\r\n        'June',\r\n        'July',\r\n        'August',\r\n        'September',\r\n        'October',\r\n        'November',\r\n        'December'\r\n    ],\r\n    es: [\r\n        'Enero',\r\n        'Febrero',\r\n        'Marzo',\r\n        'Abril',\r\n        'Mayo',\r\n        'Junio',\r\n        'Julio',\r\n        'Agosto',\r\n        'Septiembre',\r\n        'Octubre',\r\n        'Noviembre',\r\n        'Diciembre'\r\n    ],\r\n    ru: [\r\n        'Январь',\r\n        'Февраль',\r\n        'Март',\r\n        'Апрель',\r\n        'Май',\r\n        'Июнь',\r\n        'Июль',\r\n        'Август',\r\n        'Сентябрь',\r\n        'Октябрь',\r\n        'Ноябрь',\r\n        'Декабрь'\r\n    ],\r\n    ptBr: [\r\n        'Janeiro',\r\n        'Fevereiro',\r\n        'Março',\r\n        'Abril',\r\n        'Maio',\r\n        'Junho',\r\n        'Julho',\r\n        'Agosto',\r\n        'Setembro',\r\n        'Outubro',\r\n        'Novembro',\r\n        'Dezembro'\r\n    ],\r\n    fr: [\r\n        'Janvier',\r\n        'Février',\r\n        'Mars',\r\n        'Avril',\r\n        'Mai',\r\n        'Juin',\r\n        'Juillet',\r\n        'Août',\r\n        'Septembre',\r\n        'Octobre',\r\n        'Novembre',\r\n        'Décembre'\r\n    ],\r\n    tr: [\r\n        'Ocak',\r\n        'Şubat',\r\n        'Mart',\r\n        'Nisan',\r\n        'Mayıs',\r\n        'Haziran',\r\n        'Temmuz',\r\n        'Ağustos',\r\n        'Eylül',\r\n        'Ekim',\r\n        'Kasım',\r\n        'Aralık'\r\n    ],\r\n    zh: [\r\n        '一月',\r\n        '二月',\r\n        '三月',\r\n        '四月',\r\n        '五月',\r\n        '六月',\r\n        '七月',\r\n        '八月',\r\n        '九月',\r\n        '十月',\r\n        '十一月',\r\n        '十二月'\r\n    ]\r\n};\r\n\r\nexport default {\r\n    parse(date, date_separator = '-', time_separator = /[.:]/) {\r\n        if (date instanceof Date) {\r\n            return date;\r\n        }\r\n        if (typeof date === 'string') {\r\n            let date_parts, time_parts;\r\n            const parts = date.split(' ');\r\n\r\n            date_parts = parts[0]\r\n                .split(date_separator)\r\n                .map(val => parseInt(val, 10));\r\n            time_parts = parts[1] && parts[1].split(time_separator);\r\n\r\n            // month is 0 indexed\r\n            date_parts[1] = date_parts[1] - 1;\r\n\r\n            let vals = date_parts;\r\n\r\n            if (time_parts && time_parts.length) {\r\n                if (time_parts.length == 4) {\r\n                    time_parts[3] = '0.' + time_parts[3];\r\n                    time_parts[3] = parseFloat(time_parts[3]) * 1000;\r\n                }\r\n                vals = vals.concat(time_parts);\r\n            }\r\n\r\n            return new Date(...vals);\r\n        }\r\n    },\r\n\r\n    to_string(date, with_time = false) {\r\n        if (!(date instanceof Date)) {\r\n            throw new TypeError('Invalid argument type');\r\n        }\r\n        const vals = this.get_date_values(date).map((val, i) => {\r\n            if (i === 1) {\r\n                // add 1 for month\r\n                val = val + 1;\r\n            }\r\n\r\n            if (i === 6) {\r\n                return padStart(val + '', 3, '0');\r\n            }\r\n\r\n            return padStart(val + '', 2, '0');\r\n        });\r\n        const date_string = `${vals[0]}-${vals[1]}-${vals[2]}`;\r\n        const time_string = `${vals[3]}:${vals[4]}:${vals[5]}.${vals[6]}`;\r\n\r\n        return date_string + (with_time ? ' ' + time_string : '');\r\n    },\r\n\r\n    format(date, format_string = 'YYYY-MM-DD HH:mm:ss.SSS', lang = 'en') {\r\n        const values = this.get_date_values(date).map(d => padStart(d, 2, 0));\r\n        const format_map = {\r\n            YYYY: values[0],\r\n            MM: padStart(+values[1] + 1, 2, 0),\r\n            DD: values[2],\r\n            HH: values[3],\r\n            mm: values[4],\r\n            ss: values[5],\r\n            SSS:values[6],\r\n            D: values[2],\r\n            MMMM: month_names[lang][+values[1]],\r\n            MMM: month_names[lang][+values[1]]\r\n        };\r\n\r\n        let str = format_string;\r\n        const formatted_values = [];\r\n\r\n        Object.keys(format_map)\r\n            .sort((a, b) => b.length - a.length) // big string first\r\n            .forEach(key => {\r\n                if (str.includes(key)) {\r\n                    str = str.replace(key, `$${formatted_values.length}`);\r\n                    formatted_values.push(format_map[key]);\r\n                }\r\n            });\r\n\r\n        formatted_values.forEach((value, i) => {\r\n            str = str.replace(`$${i}`, value);\r\n        });\r\n\r\n        return str;\r\n    },\r\n\r\n    diff(date_a, date_b, scale = DAY, floor = true) {\r\n        let milliseconds, seconds, hours, minutes, days, months, years;\r\n\r\n        milliseconds = date_a - date_b;\r\n        seconds = milliseconds / 1000;\r\n        minutes = seconds / 60;\r\n        hours = minutes / 60;\r\n        days = hours / 24;\r\n\r\n        // Calculate exact months diff\r\n        let monthDiff = 0;\r\n        let startDaysInMonth = this.get_days_in_month(date_b);\r\n        let endDaysInMonth = this.get_days_in_month(date_a);\r\n        let startPartial = (startDaysInMonth-date_b.getDate()) /  startDaysInMonth;\r\n        let endPartial = date_a.getDate() / endDaysInMonth;\r\n        let index = this.add(this.start_of(date_b, MONTH), 1, MONTH);\r\n        while (index.getFullYear() <= date_a.getFullYear() && index.getMonth() < date_a.getMonth()) {\r\n            monthDiff += 1;\r\n            index = this.add(index, 1, MONTH);\r\n        }\r\n        months = monthDiff + startPartial + endPartial;\r\n\r\n        if (!scale.endsWith('s')) {\r\n            scale += 's';\r\n        }\r\n\r\n        years = months / 12;\r\n\r\n        let val = {\r\n            milliseconds,\r\n            seconds,\r\n            minutes,\r\n            hours,\r\n            days,\r\n            months,\r\n            years\r\n        }[scale];\r\n\r\n        if (floor) {\r\n            return Math.floor(val);\r\n        } else {\r\n            return val;\r\n        }\r\n        \r\n    },\r\n\r\n    today() {\r\n        const vals = this.get_date_values(new Date()).slice(0, 3);\r\n        return new Date(...vals);\r\n    },\r\n\r\n    now() {\r\n        return new Date();\r\n    },\r\n\r\n    add(date, qty, scale) {\r\n        qty = parseInt(qty, 10);\r\n        const vals = [\r\n            date.getFullYear() + (scale === YEAR ? qty : 0),\r\n            date.getMonth() + (scale === MONTH ? qty : 0),\r\n            date.getDate() + (scale === DAY ? qty : 0),\r\n            date.getHours() + (scale === HOUR ? qty : 0),\r\n            date.getMinutes() + (scale === MINUTE ? qty : 0),\r\n            date.getSeconds() + (scale === SECOND ? qty : 0),\r\n            date.getMilliseconds() + (scale === MILLISECOND ? qty : 0)\r\n        ];\r\n        return new Date(...vals);\r\n    },\r\n\r\n    start_of(date, scale) {\r\n        const scores = {\r\n            [YEAR]: 6,\r\n            [MONTH]: 5,\r\n            [DAY]: 4,\r\n            [HOUR]: 3,\r\n            [MINUTE]: 2,\r\n            [SECOND]: 1,\r\n            [MILLISECOND]: 0\r\n        };\r\n\r\n        function should_reset(_scale) {\r\n            const max_score = scores[scale];\r\n            return scores[_scale] <= max_score;\r\n        }\r\n\r\n        const vals = [\r\n            date.getFullYear(),\r\n            should_reset(YEAR) ? 0 : date.getMonth(),\r\n            should_reset(MONTH) ? 1 : date.getDate(),\r\n            should_reset(DAY) ? 0 : date.getHours(),\r\n            should_reset(HOUR) ? 0 : date.getMinutes(),\r\n            should_reset(MINUTE) ? 0 : date.getSeconds(),\r\n            should_reset(SECOND) ? 0 : date.getMilliseconds()\r\n        ];\r\n\r\n        return new Date(...vals);\r\n    },\r\n\r\n    clone(date) {\r\n        return new Date(...this.get_date_values(date));\r\n    },\r\n\r\n    get_date_values(date) {\r\n        return [\r\n            date.getFullYear(),\r\n            date.getMonth(),\r\n            date.getDate(),\r\n            date.getHours(),\r\n            date.getMinutes(),\r\n            date.getSeconds(),\r\n            date.getMilliseconds()\r\n        ];\r\n    },\r\n\r\n    get_days_in_month(date) {\r\n        const no_of_days = [31, 28, 31, 30, 31, 30, 31, 31, 30, 31, 30, 31];\r\n\r\n        const month = date.getMonth();\r\n\r\n        if (month !== 1) {\r\n            return no_of_days[month];\r\n        }\r\n\r\n        // Feb\r\n        const year = date.getFullYear();\r\n        if ((year % 4 == 0 && year % 100 != 0) || year % 400 == 0) {\r\n            return 29;\r\n        }\r\n        return 28;\r\n    }\r\n};\r\n\r\n// https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/String/padStart\r\nfunction padStart(str, targetLength, padString) {\r\n    str = str + '';\r\n    targetLength = targetLength >> 0;\r\n    padString = String(typeof padString !== 'undefined' ? padString : ' ');\r\n    if (str.length > targetLength) {\r\n        return String(str);\r\n    } else {\r\n        targetLength = targetLength - str.length;\r\n        if (targetLength > padString.length) {\r\n            padString += padString.repeat(targetLength / padString.length);\r\n        }\r\n        return padString.slice(0, targetLength) + String(str);\r\n    }\r\n}\r\n","export function $(expr, con) {\r\n    return typeof expr === 'string'\r\n        ? (con || document).querySelector(expr)\r\n        : expr || null;\r\n}\r\n\r\nexport function createSVG(tag, attrs) {\r\n    const elem = document.createElementNS('http://www.w3.org/2000/svg', tag);\r\n    for (let attr in attrs) {\r\n        if (attr === 'append_to') {\r\n            const parent = attrs.append_to;\r\n            parent.appendChild(elem);\r\n        } else if (attr === 'innerHTML') {\r\n            elem.innerHTML = attrs.innerHTML;\r\n        } else {\r\n            elem.setAttribute(attr, attrs[attr]);\r\n        }\r\n    }\r\n    return elem;\r\n}\r\n\r\nexport function animateSVG(svgElement, attr, from, to) {\r\n    const animatedSvgElement = getAnimationElement(svgElement, attr, from, to);\r\n\r\n    if (animatedSvgElement === svgElement) {\r\n        // triggered 2nd time programmatically\r\n        // trigger artificial click event\r\n        const event = document.createEvent('HTMLEvents');\r\n        event.initEvent('click', true, true);\r\n        event.eventName = 'click';\r\n        animatedSvgElement.dispatchEvent(event);\r\n    }\r\n}\r\n\r\nfunction getAnimationElement(\r\n    svgElement,\r\n    attr,\r\n    from,\r\n    to,\r\n    dur = '0.4s',\r\n    begin = '0.1s'\r\n) {\r\n    const animEl = svgElement.querySelector('animate');\r\n    if (animEl) {\r\n        $.attr(animEl, {\r\n            attributeName: attr,\r\n            from,\r\n            to,\r\n            dur,\r\n            begin: 'click + ' + begin // artificial click\r\n        });\r\n        return svgElement;\r\n    }\r\n\r\n    const animateElement = createSVG('animate', {\r\n        attributeName: attr,\r\n        from,\r\n        to,\r\n        dur,\r\n        begin,\r\n        calcMode: 'spline',\r\n        values: from + ';' + to,\r\n        keyTimes: '0; 1',\r\n        keySplines: cubic_bezier('ease-out')\r\n    });\r\n    svgElement.appendChild(animateElement);\r\n\r\n    return svgElement;\r\n}\r\n\r\nfunction cubic_bezier(name) {\r\n    return {\r\n        ease: '.25 .1 .25 1',\r\n        linear: '0 0 1 1',\r\n        'ease-in': '.42 0 1 1',\r\n        'ease-out': '0 0 .58 1',\r\n        'ease-in-out': '.42 0 .58 1'\r\n    }[name];\r\n}\r\n\r\n$.on = (element, event, selector, callback) => {\r\n    if (!callback) {\r\n        callback = selector;\r\n        $.bind(element, event, callback);\r\n    } else {\r\n        $.delegate(element, event, selector, callback);\r\n    }\r\n};\r\n\r\n$.off = (element, event, handler) => {\r\n    element.removeEventListener(event, handler);\r\n};\r\n\r\n$.bind = (element, event, callback) => {\r\n    event.split(/\\s+/).forEach(function(event) {\r\n        element.addEventListener(event, callback);\r\n    });\r\n};\r\n\r\n$.delegate = (element, event, selector, callback) => {\r\n    element.addEventListener(event, function(e) {\r\n        const delegatedTarget = e.target.closest(selector);\r\n        if (delegatedTarget) {\r\n            e.delegatedTarget = delegatedTarget;\r\n            callback.call(this, e, delegatedTarget);\r\n        }\r\n    });\r\n};\r\n\r\n$.closest = (selector, element) => {\r\n    if (!element) return null;\r\n\r\n    if (element.matches(selector)) {\r\n        return element;\r\n    }\r\n\r\n    return $.closest(selector, element.parentNode);\r\n};\r\n\r\n$.attr = (element, attr, value) => {\r\n    if (!value && typeof attr === 'string') {\r\n        return element.getAttribute(attr);\r\n    }\r\n\r\n    if (typeof attr === 'object') {\r\n        for (let key in attr) {\r\n            $.attr(element, key, attr[key]);\r\n        }\r\n        return;\r\n    }\r\n\r\n    element.setAttribute(attr, value);\r\n};\r\n","import date_utils from './date_utils';\r\nimport { $, createSVG, animateSVG } from './svg_utils';\r\n\r\nexport default class Bar {\r\n    constructor(gantt, task) {\r\n        this.set_defaults(gantt, task);\r\n        this.prepare();\r\n        this.draw();\r\n        this.bind();\r\n    }\r\n\r\n    set_defaults(gantt, task) {\r\n        this.action_completed = false;\r\n        this.gantt = gantt;\r\n        this.task = task;\r\n    }\r\n\r\n    prepare() {\r\n        this.prepare_values();\r\n        this.prepare_helpers();\r\n    }\r\n\r\n    prepare_values() {\r\n        this.invalid = this.task.invalid;\r\n        this.height = this.gantt.options.bar_height;\r\n        this.x = this.compute_x();\r\n        this.corner_radius = this.gantt.options.bar_corner_radius;\r\n        this.duration =\r\n            date_utils.diff(this.task._end, this.task._start, 'hour') /\r\n            this.gantt.options.step;\r\n        this.width = this.gantt.options.column_width * this.duration;\r\n        this.y = this.compute_y();\r\n        this.progress_width =\r\n            this.gantt.options.column_width *\r\n            this.duration *\r\n            (this.task.progress / 100) || 0;\r\n        this.group = createSVG('g', {\r\n            class: 'bar-wrapper ' + (this.task.custom_class || ''),\r\n            'data-id': this.task.id\r\n        });\r\n        this.bar_group = createSVG('g', {\r\n            class: 'bar-group',\r\n            append_to: this.group\r\n        });\r\n    }\r\n\r\n    prepare_helpers() {\r\n        SVGElement.prototype.getX = function () {\r\n            if (this.nodeName == 'circle') return this.getAttribute('cx')-this.getAttribute('r');\r\n            return +this.getAttribute('x');\r\n        };\r\n        SVGElement.prototype.getY = function () {\r\n            if (this.nodeName == 'circle') return this.getAttribute('cy')-this.getAttribute('r');\r\n            return +this.getAttribute('y');\r\n        };\r\n        SVGElement.prototype.getWidth = function () {\r\n            if (this.nodeName == 'circle') return this.getAttribute('r')*2;\r\n            return +this.getAttribute('width');\r\n        };\r\n        SVGElement.prototype.getHeight = function () {\r\n            if (this.nodeName == 'circle') return this.getAttribute('r')*2;\r\n            return +this.getAttribute('height');\r\n        };\r\n        SVGElement.prototype.getEndX = function () {\r\n            if (this.nodeName == 'circle') return this.getAttribute('cx')+this.getAttribute('r')*2;\r\n            return this.getX() + this.getWidth();\r\n        };\r\n    }\r\n\r\n    draw() {\r\n        this.draw_bar();\r\n        this.draw_label();\r\n    }\r\n\r\n    draw_bar() {\r\n        // Single point where the start date = the end date\r\n        if (this.task.start == this.task.end) {\r\n            this.$bar = createSVG('circle', {\r\n                cx: this.x,\r\n                cy: this.y + (this.gantt.options.bar_height / 2),\r\n                r: this.gantt.options.bar_height / 4,\r\n                class: 'bar',\r\n                style: 'fill:' + this.task.Color || '',\r\n                append_to: this.bar_group\r\n            });\r\n            // this.$bar = createSVG('polygon', {\r\n            //     x: this.x,\r\n            //     y: this.y + (this.gantt.options.bar_height / 2),\r\n            //     width: this.gantt.options.bar_height / 4,\r\n            //     height: this.gantt.options.bar_height / 4,\r\n            //     class: 'bar',\r\n            //     style: 'fill:' + this.task.Color || '',\r\n            //     append_to: this.bar_group\r\n            // });\r\n        } else {\r\n            // Date range\r\n            this.$bar = createSVG('rect', {\r\n                x: this.x,\r\n                y: this.y,\r\n                width: this.width,\r\n                height: this.height,\r\n                rx: this.corner_radius,\r\n                ry: this.corner_radius,\r\n                class: 'bar',\r\n                style: 'fill:' + this.task.Color || '',\r\n                append_to: this.bar_group\r\n            });\r\n\r\n            animateSVG(this.$bar, 'width', 0, this.width);\r\n        }\r\n\r\n\r\n        if (this.invalid) {\r\n            this.$bar.classList.add('bar-invalid');\r\n        }\r\n    }\r\n\r\n    draw_label() {\r\n        createSVG('text', {\r\n            x: this.x + this.width / 2,\r\n            y: this.y + this.height / 2,\r\n            innerHTML: this.task.name,\r\n            class: 'bar-label',\r\n            append_to: this.bar_group\r\n        });\r\n\r\n        // labels get BBox in the next tick\r\n        requestAnimationFrame(() => this.update_label_position());\r\n    }\r\n\r\n    get_progress_polygon_points() {\r\n        const bar_progress = this.$bar_progress;\r\n        return [\r\n            bar_progress.getEndX() - 5,\r\n            bar_progress.getY() + bar_progress.getHeight(),\r\n            bar_progress.getEndX() + 5,\r\n            bar_progress.getY() + bar_progress.getHeight(),\r\n            bar_progress.getEndX(),\r\n            bar_progress.getY() + bar_progress.getHeight() - 8.66\r\n        ];\r\n    }\r\n\r\n    bind() {\r\n        // if (this.invalid) return;\r\n        this.setup_click_event();\r\n    }\r\n\r\n    setup_click_event() {\r\n        $.on(this.group, 'focus ' + this.gantt.options.popup_trigger, e => {\r\n            if (this.action_completed) {\r\n                // just finished a move action, wait for a few seconds\r\n                return;\r\n            }\r\n\r\n            this.show_popup();\r\n            this.gantt.unselect_all();\r\n            this.group.classList.add('active');\r\n        });\r\n\r\n        $.on(this.group, 'dblclick', e => {\r\n            if (this.action_completed) {\r\n                // just finished a move action, wait for a few seconds\r\n                return;\r\n            }\r\n\r\n            this.gantt.trigger_event('click', [this.task]);\r\n        });\r\n    }\r\n\r\n    show_popup() {\r\n        if (this.gantt.bar_being_dragged) return;\r\n\r\n        const start_date = date_utils.format(this.task._start, 'MMM D, YYYY', this.gantt.options.language);\r\n        const end_date = date_utils.format(\r\n            date_utils.add(this.task._end, -1, 'second'),\r\n            'MMM D, YYYY',\r\n            this.gantt.options.language\r\n        );\r\n        const subtitle = start_date + ' - ' + end_date;\r\n\r\n        this.gantt.show_popup({\r\n            target_element: this.$bar,\r\n            title: this.task.name,\r\n            subtitle: subtitle,\r\n            task: this.task,\r\n        });\r\n    }\r\n\r\n    update_bar_position({ x = null, width = null }) {\r\n        const bar = this.$bar;\r\n        if (x) {\r\n            // get all x values of parent task\r\n            const xs = this.task.dependencies.map(dep => {\r\n                return this.gantt.get_bar(dep).$bar.getX();\r\n            });\r\n            // child task must not go before parent\r\n            const valid_x = xs.reduce((prev, curr) => {\r\n                return x >= curr;\r\n            }, x);\r\n            if (!valid_x) {\r\n                width = null;\r\n                return;\r\n            }\r\n            this.update_attr(bar, 'x', x);\r\n        }\r\n        if (width && width >= this.gantt.options.column_width) {\r\n            this.update_attr(bar, 'width', width);\r\n        }\r\n        this.update_label_position();\r\n        this.update_handle_position();\r\n        this.update_progressbar_position();\r\n        this.update_arrow_position();\r\n    }\r\n\r\n    date_changed() {\r\n        let changed = false;\r\n        const { new_start_date, new_end_date } = this.compute_start_end_date();\r\n\r\n        if (Number(this.task._start) !== Number(new_start_date)) {\r\n            changed = true;\r\n            this.task._start = new_start_date;\r\n        }\r\n\r\n        if (Number(this.task._end) !== Number(new_end_date)) {\r\n            changed = true;\r\n            this.task._end = new_end_date;\r\n        }\r\n\r\n        if (!changed) return;\r\n\r\n        this.gantt.trigger_event('date_change', [\r\n            this.task,\r\n            new_start_date,\r\n            date_utils.add(new_end_date, -1, 'second')\r\n        ]);\r\n    }\r\n\r\n    progress_changed() {\r\n        const new_progress = this.compute_progress();\r\n        this.task.progress = new_progress;\r\n        this.gantt.trigger_event('progress_change', [this.task, new_progress]);\r\n    }\r\n\r\n    set_action_completed() {\r\n        this.action_completed = true;\r\n        setTimeout(() => (this.action_completed = false), 1000);\r\n    }\r\n\r\n    compute_start_end_date() {\r\n        const bar = this.$bar;\r\n        const x_in_units = bar.getX() / this.gantt.options.column_width;\r\n        const new_start_date = date_utils.add(\r\n            this.gantt.gantt_start,\r\n            x_in_units * this.gantt.options.step,\r\n            'hour'\r\n        );\r\n        const width_in_units = bar.getWidth() / this.gantt.options.column_width;\r\n        const new_end_date = date_utils.add(\r\n            new_start_date,\r\n            width_in_units * this.gantt.options.step,\r\n            'hour'\r\n        );\r\n\r\n        return { new_start_date, new_end_date };\r\n    }\r\n\r\n    compute_progress() {\r\n        const progress =\r\n            this.$bar_progress.getWidth() / this.$bar.getWidth() * 100;\r\n        return parseInt(progress, 10);\r\n    }\r\n\r\n    compute_x() {\r\n        const { step, column_width } = this.gantt.options;\r\n        const task_start = this.task._start;\r\n        const gantt_start = this.gantt.gantt_start;\r\n\r\n        const diff = date_utils.diff(task_start, gantt_start, 'hour');\r\n        let x = diff / step * column_width;\r\n\r\n        // For months, adjust for different days in a month\r\n        if (this.gantt.view_is('Month')) {\r\n            const diff = date_utils.diff(task_start, gantt_start, 'day');\r\n            x = diff * column_width / 30;\r\n        }\r\n        return x;\r\n    }\r\n\r\n    compute_y() {\r\n        let existingBarsForStepType = this.gantt.stepTypeBars.filter(stepTypeBars => stepTypeBars.id == this.task.data.StepTypeId\r\n            && stepTypeBars.bars.every(bar =>\r\n                bar.x + bar.width <= this.x || bar.x >= this.x + this.width\r\n            ));\r\n\r\n        if (existingBarsForStepType.length > 0) {\r\n            existingBarsForStepType[0].bars.push(this);\r\n            return existingBarsForStepType[0].bars[0].y;\r\n        } else {\r\n            this.gantt.stepTypeBars.push({ id: this.task.data.StepTypeId, bars: [this] });\r\n        }\r\n\r\n        return (\r\n            this.gantt.options.header_height +\r\n            this.gantt.options.padding +\r\n            (this.gantt.stepTypeBars.length - 1) * (this.height + this.gantt.options.padding)\r\n        );\r\n    }\r\n\r\n    get_snap_position(dx) {\r\n        let odx = dx,\r\n            rem,\r\n            position;\r\n\r\n        if (this.gantt.view_is('Week')) {\r\n            rem = dx % (this.gantt.options.column_width / 7);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 14\r\n                    ? 0\r\n                    : this.gantt.options.column_width / 7);\r\n        } else if (this.gantt.view_is('Month')) {\r\n            rem = dx % (this.gantt.options.column_width / 30);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 60\r\n                    ? 0\r\n                    : this.gantt.options.column_width / 30);\r\n        } else {\r\n            rem = dx % this.gantt.options.column_width;\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.gantt.options.column_width / 2\r\n                    ? 0\r\n                    : this.gantt.options.column_width);\r\n        }\r\n        return position;\r\n    }\r\n\r\n    update_attr(element, attr, value) {\r\n        value = +value;\r\n        if (!isNaN(value)) {\r\n            element.setAttribute(attr, value);\r\n        }\r\n        return element;\r\n    }\r\n\r\n    update_progressbar_position() {\r\n        this.$bar_progress.setAttribute('x', this.$bar.getX());\r\n        this.$bar_progress.setAttribute(\r\n            'width',\r\n            this.$bar.getWidth() * (this.task.progress / 100)\r\n        );\r\n    }\r\n\r\n    update_label_position() {\r\n        const bar = this.$bar,\r\n            label = this.group.querySelector('.bar-label');\r\n\r\n        if (label.getBBox().width > bar.getWidth()) {\r\n            label.classList.add('big');\r\n            label.setAttribute('x', bar.getX() + bar.getWidth() + 5);\r\n        } else {\r\n            label.classList.remove('big');\r\n            label.setAttribute('x', bar.getX() + bar.getWidth() / 2);\r\n        }\r\n    }\r\n\r\n    update_handle_position() {\r\n        const bar = this.$bar;\r\n        this.handle_group\r\n            .querySelector('.handle.left')\r\n            .setAttribute('x', bar.getX() + 1);\r\n        this.handle_group\r\n            .querySelector('.handle.right')\r\n            .setAttribute('x', bar.getEndX() - 9);\r\n        const handle = this.group.querySelector('.handle.progress');\r\n        handle &&\r\n            handle.setAttribute('points', this.get_progress_polygon_points());\r\n    }\r\n\r\n    update_arrow_position() {\r\n        this.arrows = this.arrows || [];\r\n        for (let arrow of this.arrows) {\r\n            arrow.update();\r\n        }\r\n    }\r\n}\r\n\r\nfunction isFunction(functionToCheck) {\r\n    var getType = {};\r\n    return (\r\n        functionToCheck &&\r\n        getType.toString.call(functionToCheck) === '[object Function]'\r\n    );\r\n}\r\n","export default class Popup {\r\n    constructor(parent, custom_html) {\r\n        this.parent = parent;\r\n        this.custom_html = custom_html;\r\n        this.make();\r\n    }\r\n\r\n    make() {\r\n        this.parent.innerHTML = `\r\n            <div class=\"title\"></div>\r\n            <div class=\"subtitle\"></div>\r\n            <div class=\"pointer\"></div>\r\n        `;\r\n\r\n        this.hide();\r\n\r\n        this.title = this.parent.querySelector('.title');\r\n        this.subtitle = this.parent.querySelector('.subtitle');\r\n        this.pointer = this.parent.querySelector('.pointer');\r\n    }\r\n\r\n    show(options) {\r\n        if (!options.target_element) {\r\n            throw new Error('target_element is required to show popup');\r\n        }\r\n        if (!options.position) {\r\n            options.position = 'left';\r\n        }\r\n        const target_element = options.target_element;\r\n\r\n        if (this.custom_html) {\r\n            let html = this.custom_html(options.task);\r\n            html += '<div class=\"pointer\"></div>';\r\n            this.parent.innerHTML = html;\r\n            this.pointer = this.parent.querySelector('.pointer');\r\n        } else {\r\n            // set data\r\n            this.title.innerHTML = options.title;\r\n            this.subtitle.innerHTML = options.subtitle;\r\n            this.parent.style.width = this.parent.clientWidth + 'px';\r\n        }\r\n\r\n        // set position\r\n        let position_meta;\r\n        if (target_element instanceof HTMLElement) {\r\n            position_meta = target_element.getBoundingClientRect();\r\n        } else if (target_element instanceof SVGElement) {\r\n            position_meta = options.target_element.getBBox();\r\n        }\r\n\r\n        if (options.position === 'left') {\r\n            this.parent.style.left =\r\n                position_meta.x + (position_meta.width + 10) + 'px';\r\n            this.parent.style.top = position_meta.y + 'px';\r\n\r\n            this.pointer.style.transform = 'rotateZ(90deg)';\r\n            this.pointer.style.left = '-7px';\r\n            this.pointer.style.top = '2px';\r\n        }\r\n\r\n        // show\r\n        this.parent.style.opacity = 1;\r\n    }\r\n\r\n    hide() {\r\n        this.parent.style.opacity = 0;\r\n    }\r\n}\r\n","import date_utils from './date_utils';\r\nimport { $, createSVG } from './svg_utils';\r\nimport Bar from './bar';\r\nimport Arrow from './arrow';\r\nimport Popup from './popup';\r\n\r\nimport './gantt.scss';\r\n\r\nconst VIEW_MODE = {\r\n    QUARTER_DAY: 'Quarter Day',\r\n    HALF_DAY: 'Half Day',\r\n    DAY: 'Day',\r\n    WEEK: 'Week',\r\n    MONTH: 'Month',\r\n    YEAR: 'Year'\r\n};\r\n\r\nexport default class Gantt {\r\n\r\n    constructor(wrapper, tasks, options) {\r\n        this.stepTypeBars = [];\r\n\r\n        this.setup_wrapper(wrapper);\r\n        this.setup_options(options);\r\n        this.setup_tasks(tasks);\r\n        // initialize with default view mode\r\n        this.change_view_mode();\r\n        this.bind_events();\r\n    }\r\n\r\n    setup_wrapper(element) {\r\n        let svg_element, wrapper_element;\r\n\r\n        // CSS Selector is passed\r\n        if (typeof element === 'string') {\r\n            element = document.querySelector(element);\r\n        }\r\n\r\n        // get the SVGElement\r\n        if (element instanceof HTMLElement) {\r\n            wrapper_element = element;\r\n            svg_element = element.querySelector('svg');\r\n        } else if (element instanceof SVGElement) {\r\n            svg_element = element;\r\n        } else {\r\n            throw new TypeError(\r\n                'Frappé Gantt only supports usage of a string CSS selector,' +\r\n                \" HTML DOM element or SVG DOM element for the 'element' parameter\"\r\n            );\r\n        }\r\n\r\n        // svg element\r\n        if (!svg_element) {\r\n            // create it\r\n            this.$svg = createSVG('svg', {\r\n                append_to: wrapper_element,\r\n                class: 'gantt'\r\n            });\r\n        } else {\r\n            this.$svg = svg_element;\r\n            this.$svg.classList.add('gantt');\r\n        }\r\n\r\n        // wrapper element\r\n        this.$container = document.createElement('div');\r\n        this.$container.classList.add('gantt-container');\r\n\r\n        const parent_element = this.$svg.parentElement;\r\n        parent_element.appendChild(this.$container);\r\n        this.$container.appendChild(this.$svg);\r\n\r\n        // popup wrapper\r\n        this.popup_wrapper = document.createElement('div');\r\n        this.popup_wrapper.classList.add('popup-wrapper');\r\n        this.$container.appendChild(this.popup_wrapper);\r\n    }\r\n\r\n    setup_options(options) {\r\n        const default_options = {\r\n            header_height: 50,\r\n            column_width: 30,\r\n            step: 24,\r\n            view_modes: [...Object.values(VIEW_MODE)],\r\n            bar_height: 20,\r\n            bar_corner_radius: 3,\r\n            arrow_curve: 5,\r\n            padding: 18,\r\n            view_mode: 'Day',\r\n            date_format: 'YYYY-MM-DD',\r\n            popup_trigger: 'click',\r\n            custom_popup_html: null,\r\n            language: 'en'\r\n        };\r\n        this.options = Object.assign({}, default_options, options);\r\n    }\r\n\r\n    setup_tasks(tasks) {\r\n        // prepare tasks\r\n        this.tasks = tasks.map((task, i) => {\r\n            // convert to Date objects\r\n            task._start = date_utils.parse(task.start);\r\n            task._end = date_utils.parse(task.end);\r\n\r\n            // make task invalid if duration too large\r\n            // if (date_utils.diff(task._end, task._start, 'year') > 10) {\r\n            //     task.end = null;\r\n            // }\r\n\r\n            // cache index\r\n            task._index = i;\r\n\r\n            // invalid dates\r\n            if (!task.start && !task.end) {\r\n                const today = date_utils.today();\r\n                task._start = today;\r\n                task._end = date_utils.add(today, 2, 'day');\r\n            }\r\n\r\n            if (!task.start && task.end) {\r\n                task._start = date_utils.add(task._end, -2, 'day');\r\n            }\r\n\r\n            if (task.start && !task.end) {\r\n                if (task._start > date_utils.today())\r\n                    task._end = date_utils.add(task._start, 2, 'day');\r\n                else\r\n                    task._end = date_utils.today();//date_utils.add(task._start, 2, 'day');\r\n            }\r\n\r\n            // if hours is not set, assume the last day is full day\r\n            // e.g: 2018-09-09 becomes 2018-09-09 23:59:59\r\n            const task_end_values = date_utils.get_date_values(task._end);\r\n            if (task_end_values.slice(3).every(d => d === 0)) {\r\n                task._end = date_utils.add(task._end, 24, 'hour');\r\n            }\r\n\r\n            // invalid flag\r\n            if (!task.start || !task.end) {\r\n                task.invalid = true;\r\n            }\r\n\r\n            // dependencies\r\n            if (typeof task.dependencies === 'string' || !task.dependencies) {\r\n                let deps = [];\r\n                if (task.dependencies) {\r\n                    deps = task.dependencies\r\n                        .split(',')\r\n                        .map(d => d.trim())\r\n                        .filter(d => d);\r\n                }\r\n                task.dependencies = deps;\r\n            }\r\n\r\n            // uids\r\n            if (!task.id) {\r\n                task.id = generate_id(task);\r\n            }\r\n\r\n            return task;\r\n        });\r\n\r\n        this.setup_dependencies();\r\n    }\r\n\r\n    setup_dependencies() {\r\n        this.dependency_map = {};\r\n        for (let t of this.tasks) {\r\n            for (let d of t.dependencies) {\r\n                this.dependency_map[d] = this.dependency_map[d] || [];\r\n                this.dependency_map[d].push(t.id);\r\n            }\r\n        }\r\n    }\r\n\r\n    refresh(tasks) {\r\n        this.setup_tasks(tasks);\r\n        this.change_view_mode();\r\n    }\r\n\r\n    change_view_mode(mode = this.options.view_mode) {\r\n        this.update_view_scale(mode);\r\n        this.setup_dates();\r\n        this.render();\r\n        // fire viewmode_change event\r\n        this.trigger_event('view_change', [mode]);\r\n    }\r\n\r\n    update_view_scale(view_mode) {\r\n        this.options.view_mode = view_mode;\r\n\r\n        if (view_mode === VIEW_MODE.DAY) {\r\n            this.options.step = 24;\r\n            this.options.column_width = 38;\r\n        } else if (view_mode === VIEW_MODE.HALF_DAY) {\r\n            this.options.step = 24 / 2;\r\n            this.options.column_width = 38;\r\n        } else if (view_mode === VIEW_MODE.QUARTER_DAY) {\r\n            this.options.step = 24 / 4;\r\n            this.options.column_width = 38;\r\n        } else if (view_mode === VIEW_MODE.WEEK) {\r\n            this.options.step = 24 * 7;\r\n            this.options.column_width = 140;\r\n        } else if (view_mode === VIEW_MODE.MONTH) {\r\n            this.options.step = 24 * 30;\r\n            this.options.column_width = 120;\r\n        } else if (view_mode === VIEW_MODE.YEAR) {\r\n            this.options.step = 24 * 365;\r\n            this.options.column_width = 120;\r\n        }\r\n    }\r\n\r\n    setup_dates() {\r\n        this.setup_gantt_dates();\r\n        this.setup_date_values();\r\n    }\r\n\r\n    setup_gantt_dates() {\r\n        this.gantt_start = this.gantt_end = null;\r\n\r\n        for (let task of this.tasks) {\r\n            // set global start and end date\r\n            if (!this.gantt_start || task._start < this.gantt_start) {\r\n                this.gantt_start = task._start;\r\n            }\r\n            if (!this.gantt_end || task._end > this.gantt_end) {\r\n                this.gantt_end = task._end;\r\n            }\r\n        }\r\n\r\n        this.gantt_start = date_utils.start_of(this.gantt_start, 'day');\r\n        this.gantt_end = date_utils.start_of(this.gantt_end, 'day');\r\n\r\n        // add date padding on both sides\r\n        if (this.view_is([VIEW_MODE.QUARTER_DAY, VIEW_MODE.HALF_DAY])) {\r\n            this.gantt_start = date_utils.add(this.gantt_start, -7, 'day');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 7, 'day');\r\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\r\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\r\n        } else if (this.view_is(VIEW_MODE.YEAR)) {\r\n            this.gantt_start = date_utils.start_of(this.gantt_start, 'year');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'year');\r\n        } else {\r\n            this.gantt_start = date_utils.add(this.gantt_start, -1, 'month');\r\n            this.gantt_end = date_utils.add(this.gantt_end, 1, 'month');\r\n        }\r\n    }\r\n\r\n    setup_date_values() {\r\n        this.dates = [];\r\n        let cur_date = null;\r\n\r\n        while (cur_date === null || cur_date < this.gantt_end) {\r\n            if (!cur_date) {\r\n                cur_date = date_utils.clone(this.gantt_start);\r\n            } else {\r\n                if (this.view_is(VIEW_MODE.YEAR)) {\r\n                    cur_date = date_utils.add(cur_date, 1, 'year');\r\n                } else if (this.view_is(VIEW_MODE.MONTH)) {\r\n                    cur_date = date_utils.add(cur_date, 1, 'month');\r\n                } else {\r\n                    cur_date = date_utils.add(\r\n                        cur_date,\r\n                        this.options.step,\r\n                        'hour'\r\n                    );\r\n                }\r\n            }\r\n            this.dates.push(cur_date);\r\n        }\r\n    }\r\n\r\n    bind_events() {\r\n        this.bind_grid_click();\r\n    }\r\n\r\n    render() {\r\n        this.clear();\r\n        this.setup_layers();\r\n        this.make_bars();\r\n        this.make_grid();\r\n        this.make_dates();\r\n        this.set_width();\r\n        this.set_scroll_position();\r\n    }\r\n\r\n    setup_layers() {\r\n        this.layers = {};\r\n        const layers = ['grid', 'date', 'arrow', 'progress', 'bar', 'details'];\r\n        // make group layers\r\n        for (let layer of layers) {\r\n            this.layers[layer] = createSVG('g', {\r\n                class: layer,\r\n                append_to: this.$svg\r\n            });\r\n        }\r\n    }\r\n\r\n    make_grid() {\r\n        this.make_grid_background();\r\n        this.make_grid_rows();\r\n        this.make_grid_header();\r\n        this.make_grid_ticks();\r\n        this.make_grid_highlights();\r\n    }\r\n\r\n    make_grid_background() {\r\n        const grid_width = this.dates.length * this.options.column_width;\r\n        const grid_height =\r\n            this.options.header_height +\r\n            this.options.padding +\r\n            (this.options.bar_height + this.options.padding) *\r\n            this.stepTypeBars.length;\r\n\r\n        createSVG('rect', {\r\n            x: 0,\r\n            y: 0,\r\n            width: grid_width,\r\n            height: grid_height,\r\n            class: 'grid-background',\r\n            append_to: this.layers.grid\r\n        });\r\n\r\n        $.attr(this.$svg, {\r\n            height: grid_height + this.options.padding + 100,\r\n            width: '100%'\r\n        });\r\n    }\r\n\r\n    make_grid_rows() {\r\n        const rows_layer = createSVG('g', { append_to: this.layers.grid });\r\n        const lines_layer = createSVG('g', { append_to: this.layers.grid });\r\n\r\n        const row_width = this.dates.length * this.options.column_width;\r\n        const row_height = this.options.bar_height + this.options.padding;\r\n\r\n        let row_y = this.options.header_height + this.options.padding / 2;\r\n\r\n        for (let row of this.stepTypeBars) {\r\n            createSVG('rect', {\r\n                x: 0,\r\n                y: row_y,\r\n                width: row_width,\r\n                height: row_height,\r\n                class: 'grid-row',\r\n                append_to: rows_layer\r\n            });\r\n\r\n            createSVG('line', {\r\n                x1: 0,\r\n                y1: row_y + row_height,\r\n                x2: row_width,\r\n                y2: row_y + row_height,\r\n                class: 'row-line',\r\n                append_to: lines_layer\r\n            });\r\n\r\n            row_y += this.options.bar_height + this.options.padding;\r\n        }\r\n    }\r\n\r\n    make_grid_header() {\r\n        const header_width = this.dates.length * this.options.column_width;\r\n        const header_height = this.options.header_height + 10;\r\n        createSVG('rect', {\r\n            x: 0,\r\n            y: 0,\r\n            width: header_width,\r\n            height: header_height,\r\n            class: 'grid-header',\r\n            append_to: this.layers.grid\r\n        });\r\n    }\r\n\r\n    make_grid_ticks() {\r\n        let tick_x = 0;\r\n        let tick_y = this.options.header_height + this.options.padding / 2;\r\n        let tick_height =\r\n            (this.options.bar_height + this.options.padding) *\r\n            this.stepTypeBars.length;\r\n\r\n        for (let date of this.dates) {\r\n            let tick_class = 'tick';\r\n            // thick tick for monday\r\n            if (this.view_is(VIEW_MODE.DAY) && date.getDate() === 1) {\r\n                tick_class += ' thick';\r\n            }\r\n            // thick tick for first week\r\n            if (\r\n                this.view_is(VIEW_MODE.WEEK) &&\r\n                date.getDate() >= 1 &&\r\n                date.getDate() < 8\r\n            ) {\r\n                tick_class += ' thick';\r\n            }\r\n            // thick ticks for quarters\r\n            if (this.view_is(VIEW_MODE.MONTH) && (date.getMonth() + 1) % 3 === 0) {\r\n                tick_class += ' thick';\r\n            }\r\n\r\n            createSVG('path', {\r\n                d: `M ${tick_x} ${tick_y} v ${tick_height}`,\r\n                class: tick_class,\r\n                append_to: this.layers.grid\r\n            });\r\n\r\n            if (this.view_is(VIEW_MODE.MONTH)) {\r\n                tick_x +=\r\n                    date_utils.get_days_in_month(date) *\r\n                    this.options.column_width /\r\n                    30;\r\n            } else {\r\n                tick_x += this.options.column_width;\r\n            }\r\n        }\r\n    }\r\n\r\n    make_grid_highlights() {\r\n        // highlight today's date\r\n        if (this.view_is(VIEW_MODE.DAY)) {\r\n            const x =\r\n                date_utils.diff(date_utils.today(), this.gantt_start, 'hour') /\r\n                this.options.step *\r\n                this.options.column_width;\r\n            const y = 0;\r\n\r\n            const width = this.options.column_width;\r\n            const height =\r\n                (this.options.bar_height + this.options.padding) *\r\n                this.stepTypeBars.length +\r\n                this.options.header_height +\r\n                this.options.padding / 2;\r\n\r\n            createSVG('rect', {\r\n                x,\r\n                y,\r\n                width,\r\n                height,\r\n                class: 'today-highlight',\r\n                append_to: this.layers.grid\r\n            });\r\n        }\r\n    }\r\n\r\n    make_dates() {\r\n        for (let date of this.get_dates_to_draw()) {\r\n            createSVG('text', {\r\n                x: date.lower_x,\r\n                y: date.lower_y,\r\n                innerHTML: date.lower_text,\r\n                class: 'lower-text',\r\n                append_to: this.layers.date\r\n            });\r\n\r\n            if (date.upper_text) {\r\n                const $upper_text = createSVG('text', {\r\n                    x: date.upper_x,\r\n                    y: date.upper_y,\r\n                    innerHTML: date.upper_text,\r\n                    class: 'upper-text',\r\n                    append_to: this.layers.date\r\n                });\r\n\r\n                // remove out-of-bound dates\r\n                if (\r\n                    $upper_text.getBBox().x2 > this.layers.grid.getBBox().width\r\n                ) {\r\n                    $upper_text.remove();\r\n                }\r\n            }\r\n        }\r\n    }\r\n\r\n    get_dates_to_draw() {\r\n        let last_date = null;\r\n        const dates = this.dates.map((date, i) => {\r\n            const d = this.get_date_info(date, last_date, i);\r\n            last_date = date;\r\n            return d;\r\n        });\r\n        return dates;\r\n    }\r\n\r\n    get_date_info(date, last_date, i) {\r\n        if (!last_date) {\r\n            last_date = date_utils.add(date, 1, 'year');\r\n        }\r\n        const date_text = {\r\n            'Quarter Day_lower': date_utils.format(\r\n                date,\r\n                'HH',\r\n                this.options.language\r\n            ),\r\n            'Half Day_lower': date_utils.format(\r\n                date,\r\n                'HH',\r\n                this.options.language\r\n            ),\r\n            Day_lower:\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date_utils.format(date, 'D', this.options.language)\r\n                    : '',\r\n            Week_lower:\r\n                date.getMonth() !== last_date.getMonth()\r\n                    ? date_utils.format(date, 'D MMM', this.options.language)\r\n                    : date_utils.format(date, 'D', this.options.language),\r\n            Month_lower: date_utils.format(date, 'MMMM', this.options.language),\r\n            Year_lower: date_utils.format(date, 'YYYY', this.options.language),\r\n            'Quarter Day_upper':\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date_utils.format(date, 'D MMM', this.options.language)\r\n                    : '',\r\n            'Half Day_upper':\r\n                date.getDate() !== last_date.getDate()\r\n                    ? date.getMonth() !== last_date.getMonth()\r\n                        ? date_utils.format(date, 'D MMM', this.options.language)\r\n                        : date_utils.format(date, 'D', this.options.language)\r\n                    : '',\r\n            Day_upper:\r\n                date.getMonth() !== last_date.getMonth()\r\n                    ? date_utils.format(date, 'MMMM', this.options.language)\r\n                    : '',\r\n            Week_upper:\r\n                date.getMonth() !== last_date.getMonth()\r\n                    ? date_utils.format(date, 'MMMM', this.options.language)\r\n                    : '',\r\n            Month_upper:\r\n                date.getFullYear() !== last_date.getFullYear()\r\n                    ? date_utils.format(date, 'YYYY', this.options.language)\r\n                    : '',\r\n            Year_upper:\r\n                date.getFullYear() !== last_date.getFullYear() && this.options.view_mode !== \"Year\"\r\n                    ? date_utils.format(date, 'YYYY', this.options.language)\r\n                    : ''\r\n        };\r\n\r\n        const base_pos = {\r\n            lower_y: this.options.header_height,\r\n            upper_y: this.options.header_height - 25\r\n        };\r\n\r\n        if (this.view_is(VIEW_MODE.MONTH)) {\r\n            base_pos.x = date_utils.diff(date, this.gantt_start, 'day') * this.options.column_width / 30\r\n        } else {\r\n            base_pos.x = i * this.options.column_width\r\n        }\r\n\r\n        const x_pos = {\r\n            'Quarter Day_lower': this.options.column_width * 4 / 2,\r\n            'Quarter Day_upper': 0,\r\n            'Half Day_lower': this.options.column_width * 2 / 2,\r\n            'Half Day_upper': 0,\r\n            Day_lower: this.options.column_width / 2,\r\n            Day_upper: this.options.column_width * 30 / 2,\r\n            Week_lower: 0,\r\n            Week_upper: this.options.column_width * 4 / 2,\r\n            Month_lower: (date_utils.get_days_in_month(date) * this.options.column_width / 30) / 2,\r\n            Month_upper: this.options.column_width * 12 / 2,\r\n            Year_lower: this.options.column_width / 2,\r\n            Year_upper: this.options.column_width * 30 / 2\r\n        };\r\n\r\n        return {\r\n            upper_text: date_text[`${this.options.view_mode}_upper`],\r\n            lower_text: date_text[`${this.options.view_mode}_lower`],\r\n            upper_x: base_pos.x + x_pos[`${this.options.view_mode}_upper`],\r\n            upper_y: base_pos.upper_y,\r\n            lower_x: base_pos.x + x_pos[`${this.options.view_mode}_lower`],\r\n            lower_y: base_pos.lower_y\r\n        };\r\n    }\r\n\r\n    make_bars() {\r\n        this.bars = this.tasks.map((task) => {\r\n            const bar = new Bar(this, task);\r\n            this.layers.bar.appendChild(bar.group);\r\n            return bar;\r\n        });\r\n    }\r\n\r\n    set_width() {\r\n        const cur_width = this.$svg.getBoundingClientRect().width;\r\n        const actual_width = this.$svg\r\n            .querySelector('.grid .grid-row')\r\n            .getAttribute('width');\r\n        if (cur_width < actual_width) {\r\n            this.$svg.setAttribute('width', actual_width);\r\n        }\r\n    }\r\n\r\n    set_scroll_position() {\r\n        const parent_element = this.$svg.parentElement;\r\n        if (!parent_element) return;\r\n\r\n        const hours_before_first_start = date_utils.diff(\r\n            this.get_newest_ending_date(),\r\n            this.gantt_start,\r\n            'hour'\r\n        );\r\n\r\n        const scroll_pos =\r\n            hours_before_first_start /\r\n            this.options.step *\r\n            this.options.column_width -\r\n            this.options.column_width;\r\n\r\n        parent_element.scrollLeft = scroll_pos;\r\n    }\r\n\r\n    bind_grid_click() {\r\n        $.on(\r\n            this.$svg,\r\n            this.options.popup_trigger,\r\n            '.grid-row, .grid-header',\r\n            () => {\r\n                this.unselect_all();\r\n                this.hide_popup();\r\n            }\r\n        );\r\n    }\r\n\r\n    get_all_dependent_tasks(task_id) {\r\n        let out = [];\r\n        let to_process = [task_id];\r\n        while (to_process.length) {\r\n            const deps = to_process.reduce((acc, curr) => {\r\n                acc = acc.concat(this.dependency_map[curr]);\r\n                return acc;\r\n            }, []);\r\n\r\n            out = out.concat(deps);\r\n            to_process = deps.filter(d => !to_process.includes(d));\r\n        }\r\n\r\n        return out.filter(Boolean);\r\n    }\r\n\r\n    get_snap_position(dx) {\r\n        let odx = dx,\r\n            rem,\r\n            position;\r\n\r\n        if (this.view_is(VIEW_MODE.WEEK)) {\r\n            rem = dx % (this.options.column_width / 7);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 14\r\n                    ? 0\r\n                    : this.options.column_width / 7);\r\n        } else if (this.view_is(VIEW_MODE.MONTH)) {\r\n            rem = dx % (this.options.column_width / 30);\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 60\r\n                    ? 0\r\n                    : this.options.column_width / 30);\r\n        } else {\r\n            rem = dx % this.options.column_width;\r\n            position =\r\n                odx -\r\n                rem +\r\n                (rem < this.options.column_width / 2\r\n                    ? 0\r\n                    : this.options.column_width);\r\n        }\r\n        return position;\r\n    }\r\n\r\n    unselect_all() {\r\n        [...this.$svg.querySelectorAll('.bar-wrapper')].forEach(el => {\r\n            el.classList.remove('active');\r\n        });\r\n    }\r\n\r\n    view_is(modes) {\r\n        if (typeof modes === 'string') {\r\n            return this.options.view_mode === modes;\r\n        }\r\n\r\n        if (Array.isArray(modes)) {\r\n            return modes.some(mode => this.options.view_mode === mode);\r\n        }\r\n\r\n        return false;\r\n    }\r\n\r\n    get_task(id) {\r\n        return this.tasks.find(task => {\r\n            return task.id === id;\r\n        });\r\n    }\r\n\r\n    get_bar(id) {\r\n        return this.bars.find(bar => {\r\n            return bar.task.id === id;\r\n        });\r\n    }\r\n\r\n    show_popup(options) {\r\n        if (!this.popup) {\r\n            this.popup = new Popup(\r\n                this.popup_wrapper,\r\n                this.options.custom_popup_html\r\n            );\r\n        }\r\n        this.popup.show(options);\r\n    }\r\n\r\n    hide_popup() {\r\n        this.popup && this.popup.hide();\r\n    }\r\n\r\n    trigger_event(event, args) {\r\n        if (this.options['on_' + event]) {\r\n            this.options['on_' + event].apply(null, args);\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Gets the oldest starting date from the list of tasks\r\n     *\r\n     * @returns Date\r\n     * @memberof Gantt\r\n     */\r\n    get_oldest_starting_date() {\r\n        return this.tasks\r\n            .map(task => task._start)\r\n            .reduce(\r\n                (prev_date, cur_date) =>\r\n                    cur_date <= prev_date ? cur_date : prev_date\r\n            );\r\n    }\r\n\r\n    /**\r\n     * Gets the newest ending date from the list of tasks\r\n     *\r\n     * @returns Date\r\n     * @memberof Gantt\r\n     */\r\n    get_newest_ending_date() {\r\n        return this.tasks\r\n            .map(task => task._end)\r\n            .reduce(\r\n                (prev_date, cur_date) =>\r\n                    cur_date >= prev_date ? cur_date : prev_date\r\n            );\r\n    }\r\n\r\n\r\n    /**\r\n     * Clear all elements from the parent svg element\r\n     *\r\n     * @memberof Gantt\r\n     */\r\n    clear() {\r\n        this.$svg.innerHTML = '';\r\n        this.stepTypeBars = [];\r\n        this.hide_popup();\r\n        this.popup_wrapper.style.left = 0;\r\n    }\r\n}\r\n\r\nGantt.VIEW_MODE = VIEW_MODE;\r\n\r\nfunction generate_id(task) {\r\n    return (\r\n        task.name +\r\n        '_' +\r\n        Math.random()\r\n            .toString(36)\r\n            .slice(2, 12)\r\n    );\r\n}\r\n"],"names":["month_names","en","es","ru","ptBr","fr","tr","zh","[object Object]","date","date_separator","time_separator","Date","date_parts","time_parts","parts","split","map","val","parseInt","vals","length","parseFloat","concat","with_time","TypeError","this","get_date_values","i","padStart","date_string","time_string","format_string","lang","values","d","format_map","YYYY","MM","DD","HH","mm","ss","SSS","D","MMMM","MMM","str","formatted_values","Object","keys","sort","a","b","forEach","key","includes","replace","push","value","date_a","date_b","scale","floor","milliseconds","seconds","hours","minutes","days","months","years","monthDiff","startDaysInMonth","get_days_in_month","endDaysInMonth","startPartial","getDate","endPartial","index","add","start_of","getFullYear","getMonth","endsWith","Math","slice","now","qty","getHours","getMinutes","getSeconds","getMilliseconds","scores","year","month","day","hour","minute","second","millisecond","should_reset","_scale","max_score","no_of_days","targetLength","padString","String","repeat","$","expr","con","document","querySelector","createSVG","tag","attrs","elem","createElementNS","attr","append_to","appendChild","innerHTML","setAttribute","animateSVG","svgElement","from","to","animatedSvgElement","dur","begin","animEl","attributeName","animateElement","calcMode","keyTimes","keySplines","name","ease","linear","ease-in","ease-out","ease-in-out","getAnimationElement","event","createEvent","initEvent","eventName","dispatchEvent","on","element","selector","callback","delegate","bind","off","handler","removeEventListener","addEventListener","e","delegatedTarget","target","closest","call","matches","parentNode","getAttribute","Bar","gantt","task","set_defaults","prepare","draw","action_completed","prepare_values","prepare_helpers","invalid","height","options","bar_height","x","compute_x","corner_radius","bar_corner_radius","duration","date_utils","diff","_end","_start","step","width","column_width","y","compute_y","progress_width","progress","group","class","custom_class","data-id","id","bar_group","SVGElement","prototype","getX","nodeName","getY","getWidth","getHeight","getEndX","draw_bar","draw_label","start","end","$bar","cx","cy","r","style","Color","rx","ry","classList","requestAnimationFrame","update_label_position","bar_progress","$bar_progress","setup_click_event","popup_trigger","show_popup","unselect_all","trigger_event","bar_being_dragged","subtitle","format","language","target_element","title","bar","dependencies","dep","get_bar","reduce","prev","curr","update_attr","update_handle_position","update_progressbar_position","update_arrow_position","changed","new_start_date","new_end_date","compute_start_end_date","Number","new_progress","compute_progress","setTimeout","x_in_units","gantt_start","width_in_units","task_start","view_is","existingBarsForStepType","stepTypeBars","filter","data","StepTypeId","bars","every","header_height","padding","dx","rem","position","odx","isNaN","label","getBBox","remove","handle_group","handle","get_progress_polygon_points","arrows","arrow","update","Popup","parent","custom_html","make","hide","pointer","Error","html","clientWidth","position_meta","HTMLElement","getBoundingClientRect","left","top","transform","opacity","VIEW_MODE","QUARTER_DAY","HALF_DAY","DAY","WEEK","MONTH","YEAR","Gantt","wrapper","tasks","setup_wrapper","setup_options","setup_tasks","change_view_mode","bind_events","svg_element","wrapper_element","$svg","$container","createElement","parentElement","popup_wrapper","default_options","view_modes","arrow_curve","view_mode","date_format","custom_popup_html","assign","parse","_index","today","deps","trim","random","toString","setup_dependencies","dependency_map","t","mode","update_view_scale","setup_dates","render","setup_gantt_dates","setup_date_values","gantt_end","dates","cur_date","clone","bind_grid_click","clear","setup_layers","make_bars","make_grid","make_dates","set_width","set_scroll_position","layers","layer","make_grid_background","make_grid_rows","make_grid_header","make_grid_ticks","make_grid_highlights","grid_width","grid_height","grid","rows_layer","lines_layer","row_width","row_height","row_y","row","x1","y1","x2","y2","tick_x","tick_y","tick_height","tick_class","get_dates_to_draw","lower_x","lower_y","lower_text","upper_text","$upper_text","upper_x","upper_y","last_date","get_date_info","date_text","Quarter Day_lower","Half Day_lower","Day_lower","Week_lower","Month_lower","Year_lower","Quarter Day_upper","Half Day_upper","Day_upper","Week_upper","Month_upper","Year_upper","base_pos","x_pos","cur_width","actual_width","parent_element","scroll_pos","get_newest_ending_date","scrollLeft","hide_popup","task_id","out","to_process","acc","Boolean","querySelectorAll","el","modes","Array","isArray","some","find","popup","show","args","apply","prev_date"],"mappings":"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"}